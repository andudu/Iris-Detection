function image = iris_normalise( img, xp, yp, rp , xi , yi , ri)
angleSamples = 360;
RadiusSamples = 360;
angles = (0:pi/angleSamples:pi-pi/angleSamples) + pi/(2*angleSamples);
r = 0:1/RadiusSamples:1;
nAngles = length(angles);
x1 = ones(size(angles))*xi;
y1 = ones(size(angles))*yi;
x2 = xi + 10*sin(angles);
y2 = yi + 10*cos(angles);
dx = x2 - x1;
dy = y2 - y1;
slope = dy./dx;
intercept = yi - xi .* slope;
xout = zeros(nAngles,2);
yout = zeros(nAngles,2);
for i = 1:nAngles
    [xout(i,:),yout(i,:)] = linecirc(slope(i),intercept(i),xp,yp,rp);
end
xRightIris = yi + ri * cos(angles);
yRightIris = xi + ri * sin(angles);
xLeftIris = yi - ri * cos(angles);
yLeftIris = xi - ri * sin(angles);
xrt = (1-r)' * xout(:,1)' + r' * yRightIris;
yrt = (1-r)' * yout(:,1)' + r' * xRightIris;
xlt = (1-r)' * xout(:,2)' + r' * yLeftIris;
ylt = (1-r)' * yout(:,2)' + r' * xLeftIris;
image = vec2mat(interp2(double(img),[yrt(:);ylt(:)],[xrt(:);xlt(:)]),length(r))';
%image = vec2mat(img(sub2ind(size(img),round([xrt(:);xlt(:)]),round([yrt(:);ylt(:)]))),length(r))';    